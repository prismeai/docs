openapi: '3.0.0'
info:
  version: 1.0.0
  title: Prisme.ai APIs
  description: Prisme.ai APIs specifications
  termsOfService: https://www.prisme.ai/mentions-legales
  contact:
    name: Prisme.ai Support Team
    email: support@prisme.ai
    url: https://www.prisme.ai
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.eda.prisme.ai/v2
  - url: http://localhost:3001/v2
security:
  - BearerAuth: []
  - WorkspaceApiKeyAuth: []
  - BearerAuth: []
    WorkspaceApiKeyAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
    WorkspaceApiKeyAuth:
      type: apiKey
      in: header
      name: x-prismeai-api-key
    OpenID:
      type: openIdConnect
      openIdConnectUrl: /oidc/.well-known/openid-configuration

  schemas:
    PatternName:
      type: string
      pattern: &PATTERN_NAME "^[0-9A-Za-zÀ-ÖØ-öø-ÿ ,.'- ]{1,60}$"
    PatternLabel:
      type: string
      pattern: &PATTERN_LABEL '^[0-9A-Za-z._:-]{2,60}$'
    PatternLanguage:
      type: string
      pattern: &PATTERN_LANGUAGE '^[A-Za-z]{2,10}$'
    AnyValue: {}
    Object:
      type: object
      properties:
        id:
          type: string
          description: Unique id

    Contact:
      allOf:
        - required:
            - firstName
          type: object
          properties:
            firstName:
              type: string
              description: Name
            lastName:
              type: string
              description: Name
            language:
              type: string
            photo:
              type: string
              description: Profile picture URL
            status: &USER_STATUS
              type: string
              enum:
                - pending
                - validated
                - deactivated
            meta:
              type: object
            groups:
              type: array
              items:
                type: string

        - $ref: '#/components/schemas/Object'

    SupportedMFA:
      type: string
      enum:
        - totp
        - none
        - '*'

    AuthData:
      type: object
      required:
        - id
      additionalProperties: true
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        language: {}

    User:
      allOf:
        - type: object
          properties:
            email:
              type: string
              example: foo@prisme.ai
            status: *USER_STATUS
            language:
              type: string
            authData:
              type: object
              properties:
                anonymous:
                  type: object
                prismeai:
                  type: object
                azure:
                  $ref: '#/components/schemas/AuthData'
              additionalProperties: true
            mfa:
              $ref: '#/components/schemas/SupportedMFA'
            meta:
              type: object
            platformRole:
              type: string
            groupAcls:
              type: object
              additionalProperties:
                type: object
                additionalProperties: false
                properties:
                  role:
                    type: string
        - $ref: '#/components/schemas/Contact'

    UserPatch:
      type: object
      additionalProperties: false
      properties:
        firstName:
          type: string
          pattern: *PATTERN_NAME
        lastName:
          type: string
          pattern: *PATTERN_NAME
        email:
          type: string
          format: email
        status: *USER_STATUS
        meta:
          type: object
          additionalProperties: true
        platformRole:
          type: string
        groups:
          type: array
          items:
            type: string
        groupAcls:
          type: object
          additionalProperties:
            type: object
            additionalProperties: false
            properties:
              role:
                type: string

    App:
      type: object
      required:
        - workspaceId
        - slug
      properties:
        workspaceId:
          type: string
        versions:
          oneOf:
            - type: array
              items:
                type: string
            - type: array
              items:
                $ref: '#/components/schemas/WorkspaceVersion'
        name:
          type: string
        description:
          $ref: '#/components/schemas/LocalizedText'
        documentation:
          type: object
          required:
            - workspaceSlug
            - slug
          properties:
            workspaceSlug:
              type: string
            slug:
              type: string
        config:
          $ref: '#/components/schemas/Config'
        photo:
          type: string
        labels:
          type: array
          items:
            type: string
            pattern: *PATTERN_LABEL
        slug:
          type: string
        updatedAt:
          type: string
        createdAt:
          type: string
        updatedBy:
          type: string
        createdBy:
          type: string

    AppInstanceMeta:
      type: object
      required:
        - appSlug
      additionalProperties: false
      properties: &AppInstanceMeta
        appSlug:
          type: string
          description: 'App unique id'
        appName:
          $ref: '#/components/schemas/LocalizedText'
        appVersion:
          type: string
          description: 'Defaults to the latest known app version'
        slug:
          type: string
          description: Unique & human readable id across current workspace's appInstances, which will be used to call this app automations
        disabled:
          type: boolean
          description: If disabled, this appInstance will be ignored during execution
        labels:
          type: array
          items:
            type: string
            pattern: *PATTERN_LABEL
        updatedAt:
          type: string
        createdAt:
          type: string
        updatedBy:
          type: string
        createdBy:
          type: string
        checksum:
          type: string

    AppInstance:
      type: object
      required:
        - appSlug
      additionalProperties: false
      properties:
        <<: *AppInstanceMeta
        config: {}

    DetailedAppInstance:
      type: object
      required:
        - appSlug
        - slug
        - automations
        - blocks
        - events
      additionalProperties: false
      properties:
        <<: *AppInstanceMeta
        photo:
          type: string
        automations:
          $ref: '#/components/schemas/AppAutomations'
        events:
          $ref: '#/components/schemas/ProcessedEvents'
        blocks:
          $ref: '#/components/schemas/AppBlocks'

    ProcessedEvents:
      type: object
      properties:
        emit:
          type: array
          items:
            type: string
        listen:
          type: array
          items:
            type: string
        autocomplete:
          type: array
          items:
            type: object
            required:
              - event
            properties:
              event:
                type: string
                example: 'prismeaiMessenger.message'
              autocomplete:
                $ref: '#/components/schemas/EmitAutocomplete'

    AppAutomations:
      type: array
      items:
        type: object
        required:
          - slug
          - name
          - arguments
        properties:
          slug:
            type: string
          name:
            $ref: '#/components/schemas/LocalizedText'
          description:
            $ref: '#/components/schemas/LocalizedText'
          arguments:
            additionalProperties:
              $ref: '#/components/schemas/TypedArgument'

    AppBlocks:
      type: array
      items:
        type: object
        required:
          - slug
        properties:
          slug:
            type: string
          url:
            type: string
          edit:
            $ref: '#/components/schemas/TypedArgument'
          name:
            $ref: '#/components/schemas/LocalizedText'
          description:
            $ref: '#/components/schemas/LocalizedText'
          arguments:
            additionalProperties:
              $ref: '#/components/schemas/TypedArgument'

    Workspace:
      $ref: '#/components/schemas/DSUL'

    ## Workspace security & access control

    WorkspaceSecurity:
      type: object
      additionalProperties: false
      properties:
        authorizations:
          $ref: '#/components/schemas/WorkspaceAuthorizations'
        authentication:
          type: object
          properties:
            clientId:
              type: string

    WorkspaceAuthorizations:
      type: object
      additionalProperties: false
      properties:
        roles:
          additionalProperties:
            $ref: '#/components/schemas/WorkspaceRole'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/PermissionRule'

    WorkspaceRole:
      type: object
      additionalProperties: false
      properties:
        description:
          type: string
        auth:
          type: object
          properties:
            prismeai:
              type: object
              properties:
                conditions:
                  type: object
                  additionalProperties: true
            azure:
              type: object
              properties:
                conditions:
                  type: object
                  additionalProperties: true
            basic:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            apiKey:
              type: object

    SubjectTypes:
      type: string
      enum:
        - apps
        - pages
        - files
        - events
        - workspaces
        - automations
        - secrets
        - roles
        - all

    SharableSubjectTypes:
      type: string
      enum:
        - pages
        - workspaces

    ActionTypes:
      type: string
      enum:
        - manage
        - create
        - read
        - update
        - delete
        - manage_permissions
        - manage_security
        - manage_repositories
        - read_app_dsul
        - get_usage
        - aggregate_search
        - execute
        - test

    PermissionRule:
      type: object
      additionalProperties: false
      required:
        - action
        - subject
      properties:
        role:
          description: 'The roles to which this rule is restricted'
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        inverted:
          type: boolean
          description: 'If true, will forbid instead of allow'
        reason:
          type: string
        action:
          description: 'The actions that we want to allow/deny'
          anyOf:
            - $ref: '#/components/schemas/ActionTypes'
            - type: array
              items:
                $ref: '#/components/schemas/ActionTypes'
            - type: string
            - type: array
              items:
                type: string
        subject:
          oneOf:
            - $ref: '#/components/schemas/SubjectTypes'
            - type: array
              items:
                $ref: '#/components/schemas/SubjectTypes'
        conditions:
          type: object
          description: 'Matching conditions written using a subset of MongoDB queries. This rule will take effect only if conditions match (or are empty). See https://casl.js.org/v5/en/guide/conditions-in-depth'
          additionalProperties: true
        priority:
          type: number

    WorkspaceVersion:
      type: object
      required:
        - description
      properties:
        name:
          type: string
          description: 'Version name. If left empty, will be auto generated'
        createdAt:
          type: string
        description:
          $ref: '#/components/schemas/LocalizedText'
        repository:
          type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: 'Source or dest repository id as described in workspace configuration'

    WorkspaceRepository:
      type: object
      required:
        - name
        - config
      additionalProperties: false
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - 'git'
            - 'archive'
        mode:
          type: string
          enum:
            - 'read-write'
            - 'read-only'
        config:
          anyOf:
            - type: object
              required:
                - url
                - branch
              properties:
                url:
                  type: string
                branch:
                  type: string
                auth:
                  type: object
                  properties:
                    user:
                      type: string
                    password:
                      type: string
                    sshkey:
                      type: string
            - type: object # Empty config for archive
        pull:
          type: object
          properties:
            exclude:
              type: array
              items:
                type: object
                required:
                  - path
                properties:
                  path:
                    type: string

    WorkspaceEventConfiguration:
      type: object
      additionalProperties: false
      properties:
        schema:
          additionalProperties:
            $ref: '#/components/schemas/TypedArgument'

    WorkspaceEventsConfiguration:
      type: object
      additionalProperties: false
      properties:
        mapping:
          type: object
          additionalProperties: true
          description: 'Custom mapping which will be directly sent to underlying database (Elasticsearch/Opensearch)'
        types:
          description: 'Custom configuration per event type'
          additionalProperties:
            $ref: '#/components/schemas/WorkspaceEventConfiguration'

    DSUL:
      type: object
      additionalProperties: false
      required:
        - name
      properties: &DSUL
        name:
          type: string
          pattern: *PATTERN_NAME
        description:
          $ref: '#/components/schemas/LocalizedText'
        photo:
          type: string
        config:
          $ref: '#/components/schemas/Config'
        blocks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Block'
        slug:
          type: string
        id:
          type: string
        labels:
          type: array
          items:
            type: string
            pattern: *PATTERN_LABEL
        customDomains:
          type: array
          items:
            type: string
        registerWorkspace:
          type: boolean
          description: 'If true, make this workspace metadata available to all workspaces with this variable : {{global.workspacesRegistry[WORKSPACE_SLUG]}}'
        repositories:
          type: object
          description: 'Remote versioning repositories'
          additionalProperties:
            $ref: '#/components/schemas/WorkspaceRepository'
        secrets:
          type: object
          additionalProperties: false
          properties:
            schema:
              additionalProperties:
                $ref: '#/components/schemas/TypedArgument'
        events:
          $ref: '#/components/schemas/WorkspaceEventsConfiguration'

    RuntimeModel:
      allOf:
        - $ref: '#/components/schemas/DSUL'
        - type: object
          properties:
            automations:
              additionalProperties:
                $ref: '#/components/schemas/Automation'
            imports:
              additionalProperties:
                $ref: '#/components/schemas/AppInstance'

    DSULPatch:
      type: object
      additionalProperties: false
      properties:
        <<: *DSUL

    DSULReadOnly:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        <<: *DSUL
        automations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AutomationMeta'
        pages:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PageMeta'
        imports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DetailedAppInstance'
        createdAt:
          type: string
        updatedAt:
          type: string
        createdBy:
          type: string
        id:
          type: string

    Config:
      type: object
      additionalProperties: false
      properties:
        schema:
          additionalProperties:
            $ref: '#/components/schemas/TypedArgument'
        block:
          type: string
        value: {}

    WorkspaceSecrets:
      type: object
      example:
        openaiApiKey:
          value: 'some secret api key'
        allowedModels:
          value:
            - gpt4
            - gpt4o
      additionalProperties:
        type: object
        required:
          - value
        properties:
          id:
            type: string
          value: {}
          description:
            type: string
          createdBy:
            type: string
          updatedBy:
            type: string
          createdAt:
            type: string
          updatedAt:
            type: string
          permissions:
            $ref: '#/components/schemas/PermissionsMap'

    WorkspaceSystemSecrets:
      type: object
      properties:
        prismeai_ratelimit_disabled: {}

        prismeai_ratelimit_automations: {}
        prismeai_ratelimit_emits: {}
        prismeai_ratelimit_fetchs: {}
        prismeai_ratelimit_repeats: {}

        prismeai_ratelimit_automations_burst: {}
        prismeai_ratelimit_emits_burst: {}
        prismeai_ratelimit_fetchs_burst: {}
        prismeai_ratelimit_repeats_burst: {}

    When:
      type: object
      anyOf:
        - required: ['events']
        - required: ['schedules']
        - required: ['endpoint']
        - {}
      properties:
        events:
          type: array
          items:
            type: string
          example:
            - prismeaiMessenger.event
        schedules:
          $ref: '#/components/schemas/Schedules'
        endpoint:
          oneOf:
            - type: boolean
              example: 'Set to true in order to activate HTTP endpoint. Slug will be trigger name by default'
            - type: string
              example: 'Slug name'

    Schedules:
      type: array
      items:
        type: string
      example:
        - 2021-12-25T00:00
        - '* * 1 * *'

    LocalizedText:
      oneOf:
        - type: object
          additionalProperties:
            type: string
          example:
            fr: 'Bonjour'
            en: 'Hello'
        - type: string
          example: Bonjour

    TypedArgument:
      type: object
      properties:
        type:
          type: string
          enum:
            - string
            - number
            - object
            - array
            - boolean
            - localized:string
            - localized:number
            - localized:boolean
        format:
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/TypedArgument'
        title:
          $ref: '#/components/schemas/LocalizedText'
        description:
          $ref: '#/components/schemas/LocalizedText'
        items:
          $ref: '#/components/schemas/TypedArgument'
        ui:widget:
          type: string
        ui:options:
          type: object
        secret:
          type: boolean
        event:
          type: boolean

    InstructionList:
      type: array
      items:
        $ref: '#/components/schemas/Instruction'

    AutomationMeta:
      type: object
      required:
        - name
      additionalProperties: false
      properties: &AutomationMeta
        description:
          $ref: '#/components/schemas/LocalizedText'
        private:
          type: boolean
          description: "Set this to true if you don't want your automation to be accessible outside of your app. Default is false."
          example: false
        disabled:
          type: boolean
          description: 'Set this to true if you want to turn off this automation.'
          example: true
        name:
          $ref: '#/components/schemas/LocalizedText'
        slug:
          type: string
          description: Unique & human readable id across current workspace's automations
        arguments:
          additionalProperties:
            $ref: '#/components/schemas/TypedArgument'
        validateArguments:
          type: boolean
        when:
          $ref: '#/components/schemas/When'
        labels:
          type: array
          items:
            type: string
            pattern: *PATTERN_LABEL
        events:
          $ref: '#/components/schemas/ProcessedEvents'
        updatedAt:
          type: string
        createdAt:
          type: string
        updatedBy:
          type: string
        createdBy:
          type: string
        checksum:
          type: string

    Automation:
      type: object
      required:
        - do
        - name
      additionalProperties: false
      properties:
        <<: *AutomationMeta
        when:
          $ref: '#/components/schemas/When'
        arguments:
          additionalProperties:
            $ref: '#/components/schemas/TypedArgument'
        do:
          $ref: '#/components/schemas/InstructionList'
        output:
          description: 'Automation result expression. Might be a variable reference, an object/array with variables inside ...'
          example: '{{result}}'
        authorizations:
          type: object
          properties:
            action:
              type: string

    Block:
      type: object
      description: Block
      additionalProperties: false
      properties:
        description:
          $ref: '#/components/schemas/LocalizedText'
        name:
          $ref: '#/components/schemas/LocalizedText'
        photo:
          type: string
        url:
          type: string
          description: 'A block can be a javascript bundled file. Host it on the internet and put its url here.'
          deprecated: true
        edit:
          $ref: '#/components/schemas/TypedArgument'
          deprecated: true
        block:
          type: string
          description: A block can extends another one by giving its name here
          deprecated: true
        config:
          $ref: '#/components/schemas/AnyValue'
          description: 'default config applied to the Block. Usefull for extended Blocks.'
          deprecated: true
        automation:
          oneOf:
            - type: string
            - type: object
              properties:
                slug:
                  type: string
                payload:
                  $ref: '#/components/schemas/AnyValue'
        blocks:
          type: array
          items:
            type: object
            required:
              - slug
            properties:
              slug:
                type: string
              appInstance:
                type: string
              onInit:
                oneOf:
                  - type: string
                  - type: object
                    properties:
                      event:
                        type: string
                      payload:
                        $ref: '#/components/schemas/AnyValue'
              updateOn:
                type: string
              automation:
                oneOf:
                  - type: string
                  - type: object
                    properties:
                      slug:
                        type: string
                      payload:
                        $ref: '#/components/schemas/AnyValue'
            additionalProperties: true
        css:
          type: string
          description: Css applied to Block
        schema:
          $ref: '#/components/schemas/TypedArgument'

    PageMeta:
      type: object
      required:
        - name
      description: Page
      additionalProperties: false
      properties: &PageMeta
        name:
          $ref: '#/components/schemas/LocalizedText'
        description:
          $ref: '#/components/schemas/LocalizedText'
        workspaceId:
          type: string
        workspaceSlug:
          type: string
        id:
          type: string
        slug:
          type: string
        blocks:
          type: array
          items:
            type: object
            properties:
              slug:
                type: string
              appInstance:
                type: string
        labels:
          type: array
          items:
            type: string
            pattern: *PATTERN_LABEL
        events:
          $ref: '#/components/schemas/ProcessedEvents'
        createdBy:
          type: string
        updatedBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        permissions:
          $ref: '#/components/schemas/PermissionsMap'
        customDomains:
          type: array
          items:
            type: string
        colorScheme:
          type: string
          enum:
            - auto
            - light
            - dark
        checksum:
          type: string
        favicon:
          type: string

    Page:
      type: object
      additionalProperties: false
      properties: &Page
        <<: *PageMeta
        blocks:
          type: array
          items:
            type: object
            required:
              - slug
            properties:
              slug:
                type: string
              appInstance:
                type: string
              onInit:
                oneOf:
                  - type: string
                  - type: object
                    properties:
                      event:
                        type: string
                      payload:
                        $ref: '#/components/schemas/AnyValue'
              updateOn:
                type: string
              automation:
                oneOf:
                  - type: string
                  - type: object
                    properties:
                      slug:
                        type: string
                      payload:
                        $ref: '#/components/schemas/AnyValue'
            additionalProperties: true
        styles:
          type: string
        onInit:
          oneOf:
            - type: string
            - type: object
              properties:
                event:
                  type: string
                payload:
                  $ref: '#/components/schemas/AnyValue'
        updateOn:
          type: string
        notifyOn:
          type: string
        automation:
          oneOf:
            - type: string
            - type: object
              properties:
                slug:
                  type: string
                payload:
                  $ref: '#/components/schemas/AnyValue'

    PageDetails:
      type: object
      required:
        - appInstances
      properties: &PageDetails
        appInstances:
          type: array
          items:
            type: 'object'
            properties:
              slug:
                type: string
              blocks:
                oneOf:
                  - type: object
                    additionalProperties:
                      $ref: '#/components/schemas/Block'
                    description: Map block slugs to their specification
                    example:
                      Dialog Manager.config:
                        url: https://cdn-assets.prisme.ai/widgets/nlu/setup-widget/main.js
                  - type: object
                    additionalProperties:
                      type: string
                    description: Map block slugs to their URL
                    example:
                      Dialog Manager.config: https://cdn-assets.prisme.ai/widgets/nlu/setup-widget/main.js
                    deprecated: true
        public:
          type: boolean
          description: 'Indicates whether this page is public. Reflects page permissions and cannot be set directly'
        apiKey:
          type: string
        clientId:
          type: string
        favicon:
          type: string

    DetailedPage:
      type: object
      required:
        - appInstances
        - slug
      properties:
        <<: [*Page, *PageDetails]

    File:
      type: object
      required:
        - name
        - url
        - mimetype
        - size
        - workspaceId
        - path
      properties:
        name:
          type: string
        url:
          type: string
        mimetype:
          type: string
        size:
          type: number
        workspaceId:
          type: string
        path:
          type: string
        expiresAt:
          type: string
        expiresAfter:
          type: number
          description: Number of seconds after which the file will be automatically removed. This is currently a best effort expiration as it will be deleted only upon the next restart after expiration date.
        metadata:
          type: object
          additionalProperties: true
        public:
          type: boolean
          description: 'Reflects whether the file has public-read ACL at storage provider. True by default'
        shareToken:
          type: string
          description: 'A share token to append as a ?token query parameter to grant read access with given url'

    ###############################################################################################################################################
    ############################################################ Automation Instructions ############################################################
    EmitAutocomplete:
      type: object
      additionalProperties:
        type: object
        properties:
          from:
            type: string
          path:
            type: string
          template:
            type: string
    Emit:
      type: object
      required:
        - emit
      maxProperties: 1
      properties:
        emit:
          type: object
          required:
            - event
          properties:
            event:
              type: string
              example: 'prismeaiMessenger.message'
            payload:
              $ref: '#/components/schemas/AnyValue'
            target:
              $ref: '#/components/schemas/PrismeEventTarget'
            private:
              type: boolean
            autocomplete:
              $ref: '#/components/schemas/EmitAutocomplete'
            options:
              $ref: '#/components/schemas/PrismeEventOptions'

    CreateUserTopic:
      type: object
      required:
        - createUserTopic
      maxProperties: 1
      properties:
        createUserTopic:
          $ref: '#/components/schemas/UserTopic'

    JoinUserTopic:
      type: object
      required:
        - joinUserTopic
      maxProperties: 1
      properties:
        joinUserTopic:
          type: object
          required:
            - topic
          properties:
            topic:
              type: string
              example: 'conversation:56'
            userIds:
              type: array
              items:
                type: string
              description: Subscribing user ids. If undefined, defaults to current user
            create:
              type: boolean
              description: 'Automatically create userTopic if it does not exist. Defaults: true'

    Wait:
      type: object
      required:
        - wait
      maxProperties: 1
      properties:
        wait:
          type: object
          required:
            - oneOf
          properties:
            oneOf:
              type: array
              items:
                type: object
                required:
                  - event
                properties:
                  event:
                    type: string
                    example: 'prismeaiMessenger.message'
                  filters:
                    type: object
                    description: "Only match the next event fulfilling these filters. Multiple filters will be joined with an 'AND' operator "
                    additionalProperties:
                      type: string
                    example:
                      automationSlug: someId
                      someObjectField.someNestedField: 'foo'
                  cancelTriggers:
                    type: boolean
                    description: If true, do not send this event to the the usual triggers
            timeout:
              type: number
              description: After N seconds, timeout & outputs an empty result. Defaults to 20
            output:
              type: string
              description: Will save the caught event inside this variable
              example: nameOfResultVariable

    Set:
      type: object
      required:
        - 'set'
      maxProperties: 1
      properties:
        set:
          type: object
          required:
            - name
            - value
          properties:
            name:
              type: string
              description: Variable name, might be "foo", "session.sessionScopedFoo", "global.globalScopedFoo", "user.userScopedFoo", ...
            interface:
              type: string
              description: The ID of the schema form representing the structure of the value
            value:
              $ref: '#/components/schemas/AnyValue'
              description: variable value
            clone:
              type: boolean
              description: 'If true, will clone the provided object variable instead of a reference'
            type:
              type: string
              enum:
                - replace
                - merge
                - push
              description: 'Choose merge in order to merge target variable with value. Value takes precedence.'

    Delete:
      type: object
      required:
        - delete
      maxProperties: 1
      properties:
        delete:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              description: Variable name to remove

    Conditions:
      type: object
      required:
        - default
      properties:
        default:
          $ref: '#/components/schemas/InstructionList'
      additionalProperties:
        $ref: '#/components/schemas/InstructionList'
      minProperties: 2

    RepeatBatch:
      type: object
      title: Async
      description: 'Allows parallel execution in batches'
      properties:
        size:
          type: number
          title: Batch size
          description: 'Number of iterations executed at the same time. Each batch is only started after all iterations from previous batch are done'
        interval:
          type: number
          title: Interval
          description: 'Wait interval in ms between each batch'

    Repeat:
      type: object
      required:
        - 'repeat'
      maxProperties: 1
      properties:
        repeat:
          type: object
          oneOf:
            - required: ['on', 'do']
              properties:
                on:
                  type: string
                do:
                  $ref: '#/components/schemas/InstructionList'
                  hidden: true
                until:
                  type: number
                batch:
                  $ref: '#/components/schemas/RepeatBatch'
            - required: ['until', 'do']
              properties:
                until:
                  type: number
                do:
                  $ref: '#/components/schemas/InstructionList'
                  hidden: true
                batch:
                  $ref: '#/components/schemas/RepeatBatch'
          description: One of "on" or "until" is required

    All:
      type: object
      required:
        - 'all'
      maxProperties: 1
      properties:
        all:
          description: Execute each instruction in parallel. Pause current automation execution until all instructions are processed.
          type: array
          items:
            $ref: '#/components/schemas/Instruction'

    Break:
      type: object
      required:
        - 'break'
      maxProperties: 1
      properties:
        break:
          description: Stop current automation execution. Have one option that allow a break to break all parent automations.
          type: object
          properties:
            scope:
              type: string
              enum:
                - all
                - automation
                - repeat
              description: The scope argument defines in which scope the break will take effect. It only breaks the current automation by default, it can also break all parent automations. More options might become available in the future.
            payload:
              type: object
              additionalProperties: true
              description: 'An optional payload'

    Try:
      type: object
      required:
        - 'try'
      maxProperties: 1
      properties:
        try:
          type: object
          required: ['do']
          properties:
            do:
              $ref: '#/components/schemas/InstructionList'
              hidden: true
            catch:
              $ref: '#/components/schemas/InstructionList'
              hidden: true

    Auth:
      type: object
      required:
        - 'auth'
      maxProperties: 1
      properties:
        auth:
          type: object
          properties:
            workspace:
              type: boolean
              description: 'Include current workspace identity in generated jwt'

    Fetch:
      type: object
      required:
        - 'fetch'
      maxProperties: 1
      properties:
        fetch: &fetchBody
          description: Send an HTTP request
          type: object
          required:
            - url
          properties:
            url:
              type: string
            method:
              type: string
              enum:
                - get
                - post
                - put
                - patch
                - delete
            headers:
              type: object
              additionalProperties:
                type: 'string'
            prismeaiApiKey:
              type: object
              description: 'Only for requests towards prisme.ai API. Grants additional permissions using api keys'
              properties:
                name:
                  type: string
                  description: 'Use one of the DSUL Security defined api keys, referred by its name.'

            query:
              type: object
              description: Object defining querystring parameters
              additionalProperties:
                type: 'string'
            body:
              description: HTTP request body
              $ref: '#/components/schemas/AnyValue'
            emitErrors:
              description: 'If HTTP response status code is 4xx or 5xx, emits a runtime.fetch.failed event by default'
              type: boolean
              default: true
            multipart:
              description: Sends a multipart/form-data HTTP request
              type: array
              items:
                type: object
                required:
                  - fieldname
                  - value
                properties:
                  fieldname:
                    type: string
                  value:
                    type: string
                    description: Must be a string. Raw files must be given as base64
                  filename:
                    type: string
                    description: 'Filename is required when value is a base64 encoded file'
                  contentType:
                    type: string
                    description: Optional MIME content-type
            allowSelfSignedCert:
              description: Allow self signed https certificates
              type: boolean
            output:
              type: string
              description: Name of the variable which will hold the result
            stream:
              type: object
              description: 'By default, SSE chunks are written to the output variable which can be read in real time using repeat instruction. Change this behaviour to emit chunks as individual events instead.'
              required:
                - event
              properties:
                event:
                  type: string
                endChunk:
                  description: 'Allows to configure a custom ending chunk'
                concatenate:
                  type: object
                  properties:
                    path:
                      type: string
                    throttle:
                      type: number
                payload:
                  type: object
                  additionalProperties: true
                target:
                  $ref: '#/components/schemas/PrismeEventTarget'
                options:
                  $ref: '#/components/schemas/PrismeEventOptions'
            outputMode:
              type: string
              default: body
              enum:
                - body
                - detailed_response
                - data_url
                - base64
            auth:
              type: object
              title: 'Authentication'
              properties:
                prismeai:
                  type: object
                  title: 'Prisme.ai'
                  properties:
                    forwardWorkspaceAuth:
                      type: boolean
                      description: 'Enable in order to forward previously authenticated workspace in this fetch'
                awsv4:
                  type: object
                  additionalProperties: true
                  title: 'AWS Signature V4'
                  properties:
                    accessKeyId:
                      type: string
                      title: 'Access Key ID'
                    secretAccessKey:
                      type: string
                      title: 'Secret Access Key'
                    service:
                      type: string
                    region:
                      type: string

    RateLimit:
      type: object
      required:
        - rateLimit
      maxProperties: 1
      properties:
        rateLimit:
          type: object
          required:
            - name
            - consumer
            - window
            - limit
          properties:
            name:
              type: string
              description: 'Name your rate limit'
              example: 'ApiCall'
            consumer:
              description: 'Consumer identifying key like user id, ip, ... '
              type: string
            window:
              type: number
              description: 'Fixed time window length in seconds.'
            limit:
              type: number
              description: 'Maximum number of points which can be consumed over the given window'
            consume:
              type: number
              description: 'Number of points consumed for 1 rateLimit call, defaults to 1'
            break:
              type: boolean
              description: 'Set to false in order to return reached limit error instead of breaking current automation'
            output:
              type: string
              description: Will save the caught event inside this variable
              example: nameOfResultVariable

    Comment:
      type: object
      required:
        - 'comment'
      maxProperties: 1
      properties:
        comment:
          description: Do nothing but display a comment in instructions list
          type: string

    Instruction:
      anyOf:
        - $ref: '#/components/schemas/Emit'
        - $ref: '#/components/schemas/Wait'
        - $ref: '#/components/schemas/Set'
        - $ref: '#/components/schemas/Delete'
        - $ref: '#/components/schemas/Conditions'
        - $ref: '#/components/schemas/Repeat'
        - $ref: '#/components/schemas/All'
        - $ref: '#/components/schemas/Break'
        - $ref: '#/components/schemas/Fetch'
        - $ref: '#/components/schemas/Comment'
        - $ref: '#/components/schemas/RateLimit'
        - type: object
          additionalProperties: true
          minProperties: 1
          maxProperties: 1

    AutomationResult:
      type: object
      required:
        - slug
      properties:
        slug:
          type: string
        output:
          $ref: '#/components/schemas/AnyValue'

    ################################################################################################################################
    ################################################# Permissions ##################################################################
    PermissionsList:
      type: array
      items:
        $ref: '#/components/schemas/UserPermissions'
      example:
        - target:
            id: userId1
          permissions:
            role: admin
        - target:
            id: userId2
          permissions:
            policies:
              read: true
        - target:
            public: true
          permissions:
            policies:
              read: true

    Role:
      type: string

    Policies:
      properties:
        read:
          type: boolean
        write:
          type: boolean
        update:
          type: boolean
        create:
          type: boolean
        manage_permissions:
          type: boolean

    UserPermissionsTarget:
      type: object
      anyOf:
        - required: ['id']
        - required: ['public']
        - required: ['role']
      properties:
        id:
          type: string
        public:
          type: boolean
        role:
          type: string
        displayName:
          type: string

    UserPermissions:
      type: object
      additionalProperties: false
      required:
        - target
        - permissions
      properties: &UserPermissions
        target:
          $ref: '#/components/schemas/UserPermissionsTarget'
        permissions:
          type: object
          properties:
            role:
              $ref: '#/components/schemas/Role'
            policies:
              $ref: '#/components/schemas/Policies'

    PermissionsMap:
      type: object
      additionalProperties:
        type: object
        properties:
          role:
            $ref: '#/components/schemas/Role'
          policies:
            $ref: '#/components/schemas/Policies'

    AccessToken:
      type: object
      required:
        - expiresAt
        - name
      properties:
        expiresAt:
          type: string
        name:
          type: string
        token:
          type: string
        userId:
          type: string
        id:
          type: string

    ApiKey:
      type: object
      additionalProperties: false
      required:
        - apiKey
        - rules
        - subjectType
        - subjectId
      properties:
        name:
          type: string
        apiKey:
          type: string
        subjectType:
          type: string
        subjectId:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/PermissionRule'
        disabled:
          type: boolean

    ################################################################################################################################
    ############################################################ Workspace Usage ############################################################
    WorkspaceUsage:
      type: object
      required:
        - workspaceId
        - beforeDate
        - afterDate
        - total
        - apps
      properties:
        workspaceId:
          type: string
        beforeDate:
          type: string
        afterDate:
          type: string
        interval:
          type: string
        total:
          $ref: '#/components/schemas/UsageMetrics'
        timeseries:
          type: array
          items:
            properties:
              date:
                type: string
              total:
                $ref: '#/components/schemas/UsageMetrics'
              apps:
                type: array
                items:
                  $ref: '#/components/schemas/AppUsageMetrics'
        apps:
          type: array
          items:
            $ref: '#/components/schemas/AppUsageMetrics'

    UsageMetrics:
      type: object
      required:
        - transactions
        - httpTransactions
        - eventTransactions
        - scheduleTransactions
        - sessions
        - users
      additionalProperties: false
      properties:
        transactions:
          type: number
        httpTransactions:
          type: number
        eventTransactions:
          type: number
        scheduleTransactions:
          type: number
        sessions:
          type: number
        users:
          type: number

    AppUsageMetrics:
      type: object
      required:
        - slug
        - total
      properties:
        slug:
          type: string
        total:
          type: object
          required:
            - custom
          properties:
            custom:
              type: object
              additionalProperties: true
        appInstances:
          type: array
          items:
            type: object
            required:
              - slug
              - total
            properties:
              slug:
                type: string
              total:
                type: object
                required:
                  - custom
                properties:
                  custom:
                    type: object
                    additionalProperties: true

    ##################################################################################################################################
    ############################################################# Events #############################################################
    PrismeEventTarget:
      type: object
      properties:
        userTopic:
          type: string
        userId:
          type: string
        sessionId:
          type: string
        currentSocket:
          type: boolean
          default: true
          description: 'If emitted in response to an active socket (i.e source.socketId is set), this event is only visible to this same socket. Defaults to true'

    PrismeEventOptions:
      type: object
      properties:
        persist:
          type: boolean
          description: 'Whether to persist this event or not. Defaults to true'
          default: true
        aggPayload:
          type: boolean
          default: false
          description: 'Populate advanced aggregation payload for custom mappings & analytics. This is automatically enabled for events mapped in config.events.types.*'
        async:
          type: boolean
          default: false
          description: 'If true, the instruction will return control without waiting for the event to be emitted. Defaults to false'

    PrismeEvent:
      type: object
      required:
        - type
        - source
        - createdAt
        - id
        - size
      properties:
        type:
          type: string
          example: apps.someApp.someCustomEvent
        source:
          type: object
          required:
            - correlationId
            - host
          properties:
            appSlug:
              type: string
            appInstanceFullSlug:
              type: string
            appInstanceDepth:
              type: number
            automationSlug:
              type: string
            automationDepth:
              type: number
            userId:
              type: string
            ip:
              type: string
            sessionId:
              type: string
            workspaceId:
              type: string
            socketId:
              type: string
            host:
              type: object
              required:
                - service
              properties:
                service:
                  type: string
            correlationId:
              type: string
            serviceTopic:
              type: string
        payload:
          $ref: '#/components/schemas/AnyValue'
        target:
          $ref: '#/components/schemas/PrismeEventTarget'
        options:
          $ref: '#/components/schemas/PrismeEventOptions'
        error:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
            details:
              $ref: '#/components/schemas/AnyValue'
            level:
              type: string
              enum:
                - warning
                - error
                - fatal
              example: warning
        createdAt:
          type: string
          description: Creation date (ISO8601)
        id:
          type: string
        size:
          type: number

    AppUsageEvent:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: usage
          enum:
            - usage
        payload:
          type: object
          required:
            - metrics
          properties:
            metrics:
              type: object
              additionalProperties:
                type: object
                required:
                  - value
                  - action
                properties:
                  value:
                    type: number
                  action:
                    type: string
                    enum:
                      - set
                      - increment

    AllEventRequests:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/GenericErrorEvent'
          - $ref: '#/components/schemas/FailedLogin'
          - $ref: '#/components/schemas/SucceededLogin'
          - $ref: '#/components/schemas/ExecutedAutomation'
          - $ref: '#/components/schemas/UpdatedContexts'
          - $ref: '#/components/schemas/CreatedWorkspace'
          - $ref: '#/components/schemas/UpdatedWorkspace'
          - $ref: '#/components/schemas/DeletedWorkspace'
          - $ref: '#/components/schemas/InstalledAppInstance'
          - $ref: '#/components/schemas/UninstalledAppInstance'
          - $ref: '#/components/schemas/ConfiguredAppInstance'
          - $ref: '#/components/schemas/CreatedAutomation'
          - $ref: '#/components/schemas/UpdatedAutomation'
          - $ref: '#/components/schemas/DeletedAutomation'
          - $ref: '#/components/schemas/CreatedPage'
          - $ref: '#/components/schemas/UpdatedPage'
          - $ref: '#/components/schemas/DeletedPage'
          - $ref: '#/components/schemas/AppEvent'

    AllEventResponses:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/PrismeEvent' # custom event
          # or a native event
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/GenericErrorEvent'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/FailedLogin'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/SucceededLogin'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/ExecutedAutomation'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/UpdatedContexts'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/CreatedWorkspace'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/UpdatedWorkspace'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/DeletedWorkspace'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/AppInstance'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/ConfiguredAppInstance'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/InstalledAppInstance'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/UninstalledAppInstance'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/CreatedAutomation'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/UpdatedAutomation'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/DeletedAutomation'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/CreatedPage'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/UpdatedPage'
          - allOf:
              - $ref: '#/components/schemas/PrismeEvent'
              - $ref: '#/components/schemas/DeletedPage'

    GenericErrorEvent:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: error
        payload:
          type: object
          required:
            - message
          properties:
            type:
              type: string
            message:
              type: string
            details:
              type: object
              additionalProperties: true
          additionalProperties: true

    ########################## API Keys #############################
    CreatedApiKey:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: apikeys.created
          enum:
            - apikeys.created
        payload: &API_KEY_EVENT_PAYLOAD
          type: object
          required:
            - apiKey
            - subjectType
            - subjectId
            - rules
          properties:
            apiKey:
              type: string
            subjectType:
              type: string
              enum:
                - workspaces
            subjectId:
              type: string
            rules:
              type: array
              items:
                $ref: '#/components/schemas/PermissionRule'

    UpdatedApiKey:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: apikeys.updated
          enum:
            - apikeys.updated
        payload: *API_KEY_EVENT_PAYLOAD

    DeletedApiKey:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: apikeys.deleted
          enum:
            - apikeys.deleted
        payload:
          type: object
          required:
            - apiKey
            - subjectType
            - subjectId
          properties:
            apiKey:
              type: string
            subjectType:
              type: string
              enum:
                - workspaces
            subjectId:
              type: string

    ########################## API Gateway ##########################
    FailedLogin:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.login.failed
          enum:
            - gateway.login.failed
        payload:
          type: object
          properties:
            ip:
              type: string
            email:
              type: string
            provider:
              type: string

    SucceededLogin:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.login.succeeded
          enum:
            - gateway.login.succeeded
        payload:
          type: object
          required:
            - id
            - session
            - authData
          properties:
            ip:
              type: string
            email:
              type: string
            id:
              type: string
            provider:
              type: string
            authData:
              additionalProperties:
                $ref: '#/components/schemas/AuthData'
            session:
              type: object
              required:
                - id
                - expiresIn
                - expires
              properties:
                id:
                  type: string
                expiresIn:
                  type: number
                  description: 'Expires in N seconds'
                expires:
                  type: string
                  description: 'Expires ISODate'

    FailedMFA:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.mfa.failed
          enum:
            - gateway.mfa.failed
        payload:
          type: object
          required:
            - ip
            - email
          properties:
            ip:
              type: string
            email:
              type: string

    SucceededSignup:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.signup.succeeded
          enum:
            - gateway.signup.succeeded
        payload:
          type: object
          required:
            - ip
            - user
          properties:
            ip:
              type: string
            user:
              $ref: '#/components/schemas/User'

    SucceededPasswordReset:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.passwordReset.succeeded
          enum:
            - gateway.passwordReset.succeeded
        payload:
          type: object
          required:
            - ip
            - email
          properties:
            ip:
              type: string
            email:
              type: string

    SucceededPasswordResetRequested:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.passwordReset.requested
          enum:
            - gateway.passwordReset.requested
        payload:
          type: object
          required:
            - ip
            - email
          properties:
            ip:
              type: string
            email:
              type: string

    UpdatedUser:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.users.updated
          enum:
            - gateway.users.updated
        payload:
          type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'

    BulkUpdatedUsers:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.users.bulkUpdated
          enum:
            - gateway.users.bulkUpdated
        payload:
          type: object
          required:
            - query
            - data
            - result
          properties:
            query:
              type: object
              oneOf:
                - required: 
                  - ids
                - required: 
                  - emails
              properties:
                  ids:
                    type: array
                    items:
                      type: string
                  emails:
                    type: array
                    items:
                      type: string
            behaviour:
                type: object
                properties:
                  groups:
                    type: string
                    enum: 
                      - replace
                      - add
                      - delete
            data:
              type: object
              description: The data object that was applied to the users
            result:
              type: object
              required:
                - requestedCount
                - matchedCount
                - modifiedCount
              properties:
                requestedCount:
                  type: integer
                  description: Number of users requested to be updated
                matchedCount:
                  type: integer
                  description: Number of users that matched the query
                modifiedCount:
                  type: integer
                  description: Number of users that were actually modified

    UpdatedJWKS:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: gateway.jwks.updated
          enum:
            - gateway.jwks.updated
        payload:
          type: object
          required:
            - created
            - deleted
          properties:
            created:
              type: array
              items:
                type: string
            deleted:
              type: array
              items:
                type: string
    ########################## Events API events ##########################

    EventWorkspaceSubscriber:
      type: object
      additionalProperties: true
      required:
        - workspaceId
        - userId
        - sessionId
        - socketId
        - permissions
        - targetTopic
      properties:
        workspaceId:
          type: string
        userId:
          type: string
        sessionId:
          type: string
        socketId:
          type: string
        filters:
          type: object
          additionalProperties: true
          properties:
            payloadQuery: {}
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionRule'
        targetTopic:
          type: string
        oldSocketId:
          type: string

    CleanedEvents:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: events.cleaned
          enum:
            - events.cleaned
        payload:
          type: object
          properties:
            indicesWithoutDatastream: {}
            inactiveDatastreams: {}
            emptyIndices: {}
            expiredEvents: {}

    EventsWebsocketsMessage:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: events.websockets.message
          enum:
            - events.websockets.message
        payload:
          type: object
          additionalProperties: true
          required:
            - rooms
            - event
          properties:
            rooms:
              type: array
              items:
                type: string
            event: {}

    JoinedEventsNode:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: events.nodes.joined
          enum:
            - events.nodes.joined
        payload:
          type: object
          additionalProperties: true
          required:
            - id
            - targetTopic
          properties:
            id:
              type: string
            targetTopic:
              type: string

    EventNodeMetadata:
      type: object
      properties:
        subscribers:
          type: object
          required:
            - sockets
            - joined
          properties:
            sockets:
              type: array
              items:
                type: string
            joined:
              type: array
              description: 'List of joined/updated subscribers since last sync event. In case of subscriber updates, they are not necessarily hosted by the instance emitting this object'
              items:
                $ref: '#/components/schemas/EventWorkspaceSubscriber'

    SyncEventsNode:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: events.nodes.sync
          enum:
            - events.nodes.sync
        payload:
          type: object
          additionalProperties: true
          required:
            - id
            - targetTopic
          properties:
            id:
              type: string
            targetTopic:
              type: string
            metadata:
              $ref: '#/components/schemas/EventNodeMetadata'

    LeftEventsNode:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: events.nodes.left
          enum:
            - events.nodes.left
        payload:
          type: object
          additionalProperties: true
          required:
            - id
            - targetTopic
          properties:
            id:
              type: string
            targetTopic:
              type: string

    ########################## Apps events ##########################
    PublishedApp:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: apps.published
          enum:
            - apps.published
        payload:
          type: object
          required:
            - app
          properties:
            app:
              $ref: '#/components/schemas/App'
            rebuildModel:
              type: boolean
              description: 'Whether we should rebuild this app model, true when this follows a bulk import'

    DeletedApp:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: apps.deleted
          enum:
            - apps.deleted
        payload:
          type: object
          required:
            - appSlug
          properties:
            appSlug:
              type: string

    ########################## Workspaces events ##########################
    CreatedWorkspace:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.created
          enum:
            - workspaces.created
        payload:
          type: object
          required:
            - workspace
          properties:
            workspace:
              $ref: '#/components/schemas/Workspace'

    DeletedWorkspace:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.deleted
          enum:
            - workspaces.deleted
        payload:
          type: object
          required:
            - workspaceId
          properties:
            workspaceId:
              type: string
            name:
              type: string
            workspaceSlug:
              type: string

    UpdatedWorkspace:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.updated
          enum:
            - workspaces.updated
        payload:
          type: object
          required:
            - workspace
          properties:
            workspace:
              $ref: '#/components/schemas/Workspace'
            oldSlug:
              type: string
            migrated:
              type: string

    ImportedWorkspace:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.imported
          enum:
            - workspaces.imported
        payload:
          type: object
          required:
            - workspace
            - files
          properties:
            workspace:
              $ref: '#/components/schemas/Workspace'
            files:
              type: array
              items:
                type: string
            deleted:
              type: array
              items:
                type: string
            version:
              $ref: '#/components/schemas/WorkspaceVersion'
            errors:
              type: array
              items:
                type: object
                additionalProperties: true

    ConfiguredWorkspace:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.configured
          enum:
            - workspaces.configured
        payload:
          type: object
          required:
            - config
          properties:
            config:
              $ref: '#/components/schemas/Config'
            oldConfig: {}

    UpdatedWorkspaceSecurity:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.security.updated
          enum:
            - workspaces.security.updated
        payload:
          type: object
          required:
            - security
          properties:
            security:
              $ref: '#/components/schemas/WorkspaceSecurity'

    UpdatedWorkspaceSecrets:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.secrets.updated
          enum:
            - workspaces.secrets.updated
        payload:
          type: object
          properties:
            created:
              type: array
              items:
                type: string
            updated:
              type: array
              items:
                type: string
            deleted:
              type: array
              items:
                type: string

    UpdatedWorkspaceEvents:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.events.updated
          enum:
            - workspaces.events.updated
        payload:
          type: object
          required:
            - events
          properties:
            events:
              $ref: '#/components/schemas/WorkspaceEventsConfiguration'

    PublishedWorkspaceVersion:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.versions.published
          enum:
            - workspaces.versions.published
        payload:
          type: object
          required:
            - version
          properties:
            version:
              $ref: '#/components/schemas/WorkspaceVersion'

    DeletedWorkspaceVersion:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.versions.deleted
          enum:
            - workspaces.versions.deleted
        payload:
          type: object
          required:
            - version
          properties:
            version:
              $ref: '#/components/schemas/WorkspaceVersion'

    DuplicatedWorkspace:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.duplicated
          enum:
            - workspaces.duplicated
        payload:
          type: object
          required:
            - workspace
          properties:
            workspace:
              $ref: '#/components/schemas/Workspace'
            fromWorkspace:
              type: object
              required:
                - name
                - id
              properties:
                name:
                  type: string
                slug:
                  type: string
                id:
                  type: string

    WorkspacePermissionsShared:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.permissions.shared
          enum:
            - workspaces.permissions.shared
        payload:
          type: object
          required:
            - subjectId
            - permissions
            - target
          properties:
            subjectId:
              type: string
            <<: *UserPermissions

    WorkspacePermissionsDeleted:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.permissions.deleted
          enum:
            - workspaces.permissions.deleted
        payload:
          type: object
          required:
            - subjectId
            - target
          properties:
            subjectId:
              type: string
            target:
              $ref: '#/components/schemas/UserPermissionsTarget'

    UninstalledAppInstance:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.apps.uninstalled
          enum:
            - workspaces.apps.uninstalled
        payload:
          type: object
          required:
            - slug
          properties:
            slug:
              type: string

    InstalledAppInstance:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.apps.installed
          enum:
            - workspaces.apps.installed
        payload:
          type: object
          required:
            - appInstance
            - slug
          properties:
            appInstance:
              $ref: '#/components/schemas/AppInstance'
            slug:
              type: string
            events:
              $ref: '#/components/schemas/ProcessedEvents'

    ConfiguredAppInstance:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.apps.configured
          enum:
            - workspaces.apps.configured
        payload:
          type: object
          required:
            - appInstance
            - slug
          properties:
            appInstance:
              type: object
              required:
                - appSlug
              properties:
                <<: *AppInstanceMeta
                config: {}
                oldConfig: {}
            slug:
              type: string
            oldSlug:
              type: string
              description: Filled with the previous appInstance slug when renamed
            events:
              $ref: '#/components/schemas/ProcessedEvents'

    CreatedAutomation:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.automations.created
          enum:
            - workspaces.automations.created
        payload:
          type: object
          required:
            - automation
            - slug
          properties:
            slug:
              type: string
            automation:
              $ref: '#/components/schemas/Automation'
            events:
              $ref: '#/components/schemas/ProcessedEvents'

    UpdatedAutomation:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.automations.updated
          enum:
            - workspaces.automations.updated
        payload:
          type: object
          required:
            - automation
            - slug
          properties:
            automation:
              $ref: '#/components/schemas/Automation'
            slug:
              type: string
            oldSlug:
              type: string
              description: Filled with the previous automation slug when renamed
            events:
              $ref: '#/components/schemas/ProcessedEvents'

    DeletedAutomation:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.automations.deleted
          enum:
            - workspaces.automations.deleted
        payload:
          type: object
          required:
            - automationSlug
          properties:
            automationSlug:
              type: string

    CreatedPage:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.pages.created
          enum:
            - workspaces.pages.created
        payload:
          type: object
          required:
            - page
          properties:
            page:
              $ref: '#/components/schemas/Page'
            events:
              $ref: '#/components/schemas/ProcessedEvents'

    UpdatedPage:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.pages.updated
          enum:
            - workspaces.pages.updated
        payload:
          type: object
          required:
            - page
            - slug
          properties:
            page:
              $ref: '#/components/schemas/Page'
            slug:
              type: string
            oldSlug:
              type: string
              description: Filled with the previous page slug when renamed
            events:
              $ref: '#/components/schemas/ProcessedEvents'

    UpdatedBlocks:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.blocks.updated
          enum:
            - workspaces.blocks.updated
        payload:
          type: object
          required:
            - blocks
            - workspaceSlug
          properties:
            blocks:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/Block'
            workspaceSlug:
              type: string

    DeletedPage:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.pages.deleted
          enum:
            - workspaces.pages.deleted
        payload:
          type: object
          required:
            - pageSlug
          properties:
            pageSlug:
              type: string

    PagePermissionsShared:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.pages.permissions.shared
          enum:
            - workspaces.pages.permissions.shared
        payload:
          type: object
          required:
            - subjectId
            - permissions
            - target
          properties:
            subjectId:
              type: string
            <<: *UserPermissions

    PagePermissionsDeleted:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.pages.permissions.deleted
          enum:
            - workspaces.pages.permissions.deleted
        payload:
          type: object
          required:
            - subjectId
            - target
          properties:
            subjectId:
              type: string
            target:
              $ref: '#/components/schemas/UserPermissionsTarget'

    ########################## Runtime events ##########################

    UpdatedRuntimeDSUL:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.dsul.updated
          enum:
            - runtime.dsul.updated
        payload:
          type: object
          required:
            - workspaceId
          properties:
            workspaceId:
              type: string
            duration:
              type: number
            reason:
              type: object

    TriggerType:
      type: string
      enum:
        - 'event'
        - 'endpoint'
        - 'schedule'
        - 'automation'

    TriggeredInteraction:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.interactions.triggered
          enum:
            - runtime.interactions.triggered
        payload:
          type: object
          required:
            - workspaceId
            - automation
            - trigger
            - startedAt
          properties:
            workspaceId:
              type: string
            sourceWorkspaceId:
              type: string
            authenticatedWorkspaceId:
              type: string
            automation:
              type: string
            trigger:
              type: object
              required:
                - type
                - value
              properties:
                type:
                  $ref: '#/components/schemas/TriggerType'
                value:
                  type: string
                id:
                  type: string
                appInstanceSlug:
                  type: string
            startedAt:
              type: string

    ScheduleTriggered:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.schedules.triggered
          enum:
            - runtime.schedules.triggered
        payload:
          type: object
          required:
            - workspaceId
            - automation
            - trigger
            - startedAt
          properties:
            workspaceId:
              type: string
            sourceWorkspaceId:
              type: string
            authenticatedWorkspaceId:
              type: string
            automation:
              type: string
            trigger:
              type: object
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  enum:
                    - schedule
                value:
                  type: string
                id:
                  type: string
                appInstanceSlug:
                  type: string
            startedAt:
              type: string

    ExecutedAutomation:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.automations.executed
          enum:
            - runtime.automations.executed
        payload:
          type: object
          required:
            - slug
            - trigger
            - payload
            - output
            - duration
            - startedAt
            - break
          properties:
            slug:
              type: string
            trigger:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
            payload:
              type: object
            output:
              $ref: '#/components/schemas/AnyValue'
            duration:
              type: number
            throttled:
              type: number
            startedAt:
              type: string
            break:
              type: boolean

    ScheduledAutomation:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.schedules.created
          enum:
            - runtime.schedules.created
        payload:
          type: object
          required:
            - slug
            - schedules
          properties:
            slug:
              type: string
            schedules:
              $ref: '#/components/schemas/Schedules'
            details:
              type: object
              additionalProperties: true

    SuspendedWorkspace:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: workspaces.suspended
          enum:
            - workspaces.suspended
        payload:
          type: object
          required:
            - workspaceId
            - suspended
            - reason
          properties:
            workspaceId:
              type: string
            suspended:
              type: boolean
            reason:
              type: string

    ContextSetType:
      type: string
      enum:
        - replace
        - merge
        - push
        - delete

    UpdatedContexts:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.contexts.updated
          enum:
            - runtime.contexts.updated
        payload:
          type: object
          required:
            - emitterId
            - updates
          properties:
            emitterId:
              type: string
              description: 'Internal id to avoid applying these updates to the worker which emitted them'
            updates:
              type: array
              items:
                type: object
                required:
                  - type
                  - path
                  - fullPath
                  - context
                properties:
                  type:
                    $ref: '#/components/schemas/ContextSetType'
                  path:
                    type: array
                    items:
                      oneOf:
                        - type: string
                        - type: number
                  fullPath:
                    type: string
                  context:
                    type: string
                  value: {}
                  cacheId:
                    type: string

    PendingWait:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.waits.pending
          enum:
            - runtime.waits.pending
        payload:
          type: object
          required:
            - id
            - expiresAt
            - wait
          properties:
            id:
              type: string
            expiresAt:
              type: number
            wait:
              $ref: '#/components/schemas/Wait/properties/wait'

    FulfilledWait:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.waits.fulfilled
          enum:
            - runtime.waits.fulfilled
        payload:
          type: object
          required:
            - id
            - event
          properties:
            id:
              type: string
            event:
              $ref: '#/components/schemas/PrismeEvent'

    FailedFetch:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: runtime.fetch.failed
          enum:
            - runtime.fetch.failed
        payload:
          type: object
          required:
            - request
          properties:
            request: *fetchBody
            response:
              type: object
              required:
                - status
                - body
                - headers
              properties:
                status:
                  type: number
                body: {}
                headers:
                  type: object
            error:
              type: object
              description: 'Network error details'
              properties:
                error:
                  type: string
                message:
                  type: string
                details:
                  type: object
                status:
                  type: number

    ########################## Topics events ##########################
    UserTopic:
      type: object
      required:
        - topic
      properties:
        topic:
          type: string
          example: 'conversation:56'
        userIds:
          type: array
          items:
            type: string
          description: Subscribing user ids

    CreatedUserTopic:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: events.userTopics.created
          enum:
            - events.userTopics.created
        payload:
          $ref: '#/components/schemas/UserTopic'

    JoinedUserTopic:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: events.userTopics.joined
          enum:
            - events.userTopics.joined
        payload:
          type: object
          required:
            - topic
            - user
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
            topic:
              type: string

    AppEvent:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          type: string
          example: someCustomEvent
        payload:
          $ref: '#/components/schemas/AnyValue'

    GenericError:
      type: object
      properties:
        error:
          type: string
          example: ObjectNotFound
        message:
          type: string
        details:
          $ref: '#/components/schemas/AnyValue'

    ObjectNotFoundError:
      type: object
      properties:
        error:
          type: string
          example: ObjectNotFound
        message:
          type: string

    BadParametersError:
      type: object
      properties:
        error:
          type: string
          example: BadParameters
        message:
          type: string
        details: {}

    AuthenticationError:
      type: object
      properties:
        error:
          type: string
          example: AuthenticationError
        message:
          type: string
          example: Unauthenticated

    ForbiddenError:
      type: object
      properties:
        error:
          type: string
          example: ForbiddenError
        message:
          type: string
          example: Forbidden

  ## End of schemas
paths:
  ############################################# gateway

  /v2/login/anonymous:
    post:
      description: Anonymous authentication
      operationId: anonymousAuth
      tags:
        - API Gateway
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                expiresAfter:
                  type: number
                  description: 'Optional session expiration in seconds'

      responses:
        '200': &LoginResponse
          description: Success Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    required:
                      - sessionId
                    properties:
                      sessionId:
                        type: string
                      expires:
                        type: string
        '401': &AuthenticationError
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /v2/login/mfa:
    post:
      description: MFA
      operationId: MFA
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - totp
              properties:
                totp:
                  type: string

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                properties:
                  success:
                    type: boolean
        '401': *AuthenticationError

  /v2/login:
    get:
      description: Starts generic authentication
      operationId: genericAuthInit
      tags:
        - API Gateway
        - AuthProviders
      parameters:
        - name: 'provider'
          in: 'query'
          description: 'Auth provider name as configured in api gateway environment variables'
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirection response

  /v2/login/callback:
    get: &LOGIN_CALLBACK
      description: End OAuth2 authentication
      operationId: oauthCallback
      tags:
        - API Gateway
        - AuthProviders
      parameters:
        - name: 'state'
          in: 'query'
          description: 'OAuth state param'
          required: false
          schema:
            type: string
        - name: 'code'
          in: 'query'
          description: 'OAuth authorization code'
          required: false
          schema:
            type: string
        - name: 'scope'
          in: 'query'
          allowReserved: true
          description: 'OAuth requested scopes'
          required: false
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: object
            additionalProperties: true
          style: form
          explode: false
          allowReserved: true
      responses:
        '302':
          description: Redirection response
    post: *LOGIN_CALLBACK

  /v2/login/azure:
    get:
      description: Starts azure authentication
      operationId: azureAuthInit
      tags:
        - API Gateway
        - AuthProviders
      responses:
        '302':
          description: Redirection response

  /v2/login/azure/callback:
    post:
      description: End azure authentication
      operationId: azureAuthCallback
      tags:
        - API Gateway
        - AuthProviders
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                code:
                  type: string
                client_info:
                  type: string
                state:
                  type: string
                session_state:
                  type: string
      responses:
        '302':
          description: Redirection response

  /v2/me:
    get:
      description: Retrieve current authenticated user
      operationId: getMyProfile
      tags:
        - API Gateway

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    required:
                      - sessionId
                    properties:
                      sessionId:
                        type: string
                      expires:
                        type: string
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /v2/user:
    patch:
      description: Update my user
      operationId: patchMyUser
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                firstName:
                  type: string
                  pattern: *PATTERN_NAME
                lastName:
                  type: string
                  pattern: *PATTERN_NAME
                meta:
                  type: object
                  additionalProperties: true
                photo:
                  type: string
                language:
                  type: string
                  pattern: *PATTERN_LANGUAGE
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401': *AuthenticationError
    delete:
      description: Send a validation email to delete me
      operationId: deleteMyUser
      tags:
        - API Gateway
      responses:
        '200':
          description: Success Response'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401': *AuthenticationError
  /v2/user/photo:
    post:
      description: Update user photo
      operationId: postUserPhoto
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - photo
              properties:
                photo:
                  type: string
                  format: binary
                  description: Photo as binary
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401': *AuthenticationError

  /v2/user/accessTokens:
    get:
      description: Retrieve user personal access tokens
      operationId: listAccessTokens
      tags:
        - API Gateway
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessToken'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
    post:
      description: Create a personal access token
      operationId: createAccessToken
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessToken'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401': *AuthenticationError

  /v2/user/accessTokens/{token}:
    delete:
      description: Revoke an access token
      operationId: deleteAccessToken
      tags:
        - API Gateway
      parameters:
        - name: 'token'
          in: 'path'
          description: 'Token'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /v2/user/mfa:
    post:
      description: Setup MFA
      operationId: setupMFA
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - method
                - currentPassword
              properties:
                method:
                  $ref: '#/components/schemas/SupportedMFA'
                currentPassword:
                  type: string

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - secret
                      - qrImage
                    properties:
                      secret:
                        type: string
                      qrImage:
                        type: string
                  - type: object
                    required:
                      - method
                    properties:
                      method:
                        type: string
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401': *AuthenticationError
  /v2/user/meta:
    post:
      description: Set meta data in User
      operationId: setMeta
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401': *AuthenticationError
  /v2/user/meta/{key}:
    delete:
      description: Delete meta data in User
      operationId: deleteMeta
      tags:
        - API Gateway
      parameters:
        - name: 'key'
          in: 'path'
          description: 'Key to delete'
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401': *AuthenticationError

  /v2/contacts:
    post:
      description: Retrieve some public contact. Normal users can only search specific email/ids
      operationId: findContacts
      tags:
        - API Gateway
      parameters:
        - name: 'page'
          in: 'query'
          description: 'Page number'
          schema:
            type: number
        - name: 'limit'
          in: 'query'
          description: 'Page size'
          required: false
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                email:
                  type: string
                ids:
                  type: array
                  items:
                    type: string
                firstName:
                  type: string
                  pattern: *PATTERN_NAME
                lastName:
                  type: string
                  pattern: *PATTERN_NAME
                authProvider:
                  type: string
                status: *USER_STATUS
                platformRole:
                  type: string
                groups:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - contacts
                properties:
                  size:
                    type: number
                    description: 'Total number of matching contacts'
                  contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/users:
    patch:
      description: Bulk user management API, reserved to super admins.
      operationId: bulkPatchUsers
      tags:
        - API Gateway
        - Main
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - query
                - data
              properties:
                query:
                  type: object
                  additionalProperties: false
                  oneOf:
                    - required: 
                      - ids
                    - required: 
                      - emails
                  properties:
                      ids:
                        type: array
                        items:
                          type: string
                      emails:
                        type: array
                        items:
                          type: string
                behaviour:
                    type: object
                    properties:
                      groups:
                        type: string
                        enum: 
                          - replace
                          - add
                          - delete
                data:
                  $ref: '#/components/schemas/UserPatch'
      responses:
        '200':
          description: Bulk update result
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestedCount:
                    type: number
                    description: Number of users requested to be updated
                  matchedCount:
                    type: number
                    description: Number of users found and matched
                  modifiedCount:
                    type: number
                    description: Number of users actually modified
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/users/{userId}:
    patch:
      description: User management API, reserved to super admins.
      operationId: patchUser
      tags:
        - API Gateway
        - Details
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'Target user id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
    delete:
      description: User management API, reserved to super admins.
      operationId: deleteUser
      tags:
        - API Gateway
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'Target user id'
          required: true
          schema:
            type: string
        - name: 'token'
          in: 'query'
          description: 'Valiation token sent by email'
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/signup:
    post:
      description: Signup
      operationId: signup
      tags:
        - API Gateway
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                  pattern: *PATTERN_NAME
                lastName:
                  type: string
                  pattern: *PATTERN_NAME
                language:
                  type: string
                  pattern: *PATTERN_LANGUAGE

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/user/password:
    post:
      description: Ask to reset a password for a specific user given an email. If the email is unknown, the API call will not fail.
      operationId: resetPassword
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - email
                  properties:
                    email:
                      type: string
                    language:
                      type: string
                      pattern: *PATTERN_LANGUAGE
                - type: object
                  required:
                    - token
                    - password
                  properties:
                    token:
                      type: string
                    password:
                      type: string
                      description: New user password
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValue'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: Bad permissions (such as an invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'

  /v2/user/validate:
    post:
      description: Ask to send again the account validation link, or verify a validation token to validate the corresponding account
      operationId: validateAccount
      tags:
        - API Gateway
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - email
                  properties:
                    email:
                      type: string
                    language:
                      type: string
                      pattern: *PATTERN_LANGUAGE
                - type: object
                  required:
                    - token
                  properties:
                    token:
                      type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValue'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: Bad permissions (such as an invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'

  ############################################# permissions
  /v2/{subjectType}/{subjectId}/permissions:
    post:
      description: Share the object with someone via a given role or specific permission
      operationId: share
      tags:
        - permissions
      parameters:
        - name: 'subjectType'
          in: 'path'
          description: 'The target subject type'
          required: true
          schema:
            $ref: '#/components/schemas/SharableSubjectTypes'
        - name: subjectId
          in: path
          description: The target subject id (i.e workspaceId if subjectType is 'workspace')
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPermissions'
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissions'

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
    get:
      description: Retrieve permissions for the 'subjectType' 'subjectId'
      operationId: getPermissions
      tags:
        - permissions
      parameters:
        - name: 'subjectType'
          in: 'path'
          description: 'The target subject type'
          required: true
          schema:
            $ref: '#/components/schemas/SharableSubjectTypes'
        - name: subjectId
          in: path
          description: The target subject id (i.e workspaceId if subjectType is 'workspace')
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                properties:
                  result:
                    $ref: '#/components/schemas/PermissionsList'

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /v2/{subjectType}/{subjectId}/permissions/{id}:
    delete:
      description: Revoke a specific set of permissions by id ('userId' or '*' for public or 'role:roleName')
      operationId: revokePermissions
      tags:
        - permissions
      parameters:
        - name: 'subjectType'
          in: 'path'
          description: 'The target subject type'
          required: true
          schema:
            $ref: '#/components/schemas/SharableSubjectTypes'
        - name: subjectId
          in: path
          description: The target subject id (i.e workspaceId if subjectType is 'workspace')
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The target permission id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  ############################################# prisme.ai-events
  /v2/workspaces/{workspaceId}/events:
    get:
      description: Retrieve events filtered with any JSON path specified in GET parameters. Can be called as websocket.
      operationId: eventsLongpolling
      tags:
        - 'Prisme.ai Events'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'ID of workspace to listen to'
          required: true
          schema:
            type: string
        - name: 'text'
          in: 'query'
          description: 'Search these keywords'
          schema:
            type: string
          allowReserved: true
        - name: beforeId
          in: query
          description: Match every events created before given eventId
          schema:
            type: string
        - name: appInstanceDepth
          in: query
          description: Match only events from appInstances not exceeding that depth
          schema:
            type: number
        - in: query
          name: query
          schema:
            type: object
            additionalProperties: true
          style: form
          explode: false
          allowReserved: true
        - name: 'types'
          in: 'query'
          example: message,notification
          description: 'Comma separated list of listened event types '
          schema:
            type: string
          allowReserved: true
        - name: 'afterDate'
          in: 'query'
          description: 'Retrieve events created after this ISO8601 formatted date'
          schema:
            type: string
        - name: 'beforeDate'
          in: 'query'
          description: 'Retrieve events created before this ISO8601 formatted date'
          schema:
            type: string
        - name: 'page'
          in: 'query'
          description: 'Page number'
          schema:
            type: number
        - name: 'limit'
          in: 'query'
          description: 'Page size'
          required: false
          schema:
            type: number
        - name: sort
          in: 'query'
          description: "Sort order, asc for oldest first & 'desc' for earliest first. Earliest first by default"
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      events:
                        $ref: '#/components/schemas/AllEventResponses'

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    post:
      description: Emit a new event in this workspace
      operationId: sendWorkspaceEvent
      tags:
        - 'Prisme.ai Events'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'ID of workspace to listen to'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - events
              properties:
                events:
                  $ref: '#/components/schemas/AllEventRequests'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllEventResponses'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/usage:
    get:
      description: Retrieve workspace usage stats
      operationId: workspaceUsage
      tags:
        - 'Prisme.ai Events'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'ID of workspace to listen to'
          required: true
          schema:
            type: string
        - name: 'afterDate'
          in: 'query'
          description: 'Retrieve usage stats after this ISO8601 formatted date.'
          required: true
          schema:
            type: string
        - name: 'beforeDate'
          in: 'query'
          required: true
          description: 'Retrieve usage stats before this ISO8601 formatted date.'
          schema:
            type: string
        - name: 'interval'
          in: 'query'
          description: If specified, this field will add a field to the result containing the usage over time at the specified interval. The queried data will be found in the timeseries field.
          schema:
            type: string
            enum:
              - month
              - day
        - name: 'details'
          in: 'query'
          description: 'Includes individual appInstances details'
          schema:
            type: boolean
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUsage'

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/{workspaceId}/search:
    post:
      description: Generic search API to query or aggregate events & DSUL objects
      operationId: search
      tags:
        - 'Prisme.ai Events'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'ID of workspace to search in'
          required: true
          schema:
            type: string
      requestBody: &SEARCH_REQUEST
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - query
              properties:
                scope:
                  type: string
                  enum:
                    - events
                limit:
                  type: number
                  description: 'Page size. Limit response documents, but aggregations still execute on all documents matching the given query'
                page:
                  type: number
                  description: "Page number returned by response's documents field"
                query:
                  type: object
                  additionalProperties: true
                  description: 'Elasticsearch DSL query to filter response documents'
                aggs:
                  type: object
                  additionalProperties: true
                  description: 'Elasticsearch aggregations executed on response documents'
                runtime_mappings:
                  type: object
                  additionalProperties: true
                  description: 'Elasticsearch runtime_mappings executed on runtime'
                source:
                  type: array
                  items:
                    type: string
                  description: 'Elasticsearch _source'
                sort:
                  type: array
                  items:
                    type: object
                    additionalProperties: true
                    description: 'Elasticsearch sort'
                track_total_hits:
                  type: boolean
                  description: Get real total instead of 10000

      responses: &SEARCH_RESPONSES
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    type: number
                  documents:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                  aggs:
                    type: object
                    additionalProperties: true

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/search:
    post:
      description: Cross-workspace search API, reserved to super admins
      operationId: globalSearch
      tags:
        - 'Prisme.ai Events'
      requestBody: *SEARCH_REQUEST
      responses: *SEARCH_RESPONSES

  ############################################# runtime
  /v2/workspaces/{workspaceId}/webhooks/{automationSlug}*:
    post: &POST_WEBHOOK
      description: Trigger some automation from HTTP. GET/POST/PUT/PATCH/DELETE methods can all be used
      operationId: automationWebhook
      tags:
        - 'Prisme.ai Runtime'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace ID'
          required: true
          schema:
            type: string
        - name: 'automationSlug'
          in: 'path'
          description: 'Automation slug we will trigger. Can contain a slash in order to make subpath.'
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: object
            additionalProperties: true
          style: form
          explode: false
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AnyValue'
              description: Entire body will be passed as a payload to the triggered automation
          '*/*':
            schema:
              $ref: '#/components/schemas/AnyValue'
              description: Entire body will be passed as a payload to the triggered automation

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValue'
        '400':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    get: *POST_WEBHOOK
    put: *POST_WEBHOOK
    delete: *POST_WEBHOOK
    patch: *POST_WEBHOOK

  ############################################# workspaces
  ## workspaces
  /v2/workspaces:
    get:
      description: Fetch my workspaces (those I own and shared ones)
      operationId: getWorkspaces
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'page'
          in: 'query'
          description: 'Page number'
          schema:
            type: number
        - name: 'limit'
          in: 'query'
          description: 'Page size'
          required: false
          schema:
            type: number
        - name: 'labels'
          in: 'query'
          description: 'Comma-separated labels list to filter on'
          required: false
          schema:
            type: string
        - name: 'name'
          in: 'query'
          description: 'Search by workspace name'
          required: false
          schema:
            type: string
        - name: 'slug'
          in: 'query'
          description: 'Search by workspace slug'
          required: false
          schema:
            type: string
        - name: 'email'
          in: 'query'
          description: 'Some admin email to filter on'
          required: false
          schema:
            type: string
        - name: 'sort'
          in: 'query'
          description: 'Sort by a specific field'
          required: false
          example: '-createdAt'
          schema:
            type: string
        - name: 'ids'
          in: 'query'
          description: 'Comma-separated ids'
          required: false
          schema:
            type: string
        - name: 'search'
          in: 'query'
          description: 'Search for workspace in name, description and slug'
          required: false
          schema:
            type: string
          allowReserved: true
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    post:
      description: Create a new workspace
      operationId: createWorkspace
      tags:
        - 'Prisme.ai Workspaces'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}:
    get:
      description: Fetch a workspace
      operationId: getWorkspace
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'version'
          in: 'query'
          description: 'Optional version'
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DSULReadOnly'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    patch:
      description: Update a workspace
      operationId: updateWorkspace
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DSULPatch'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

    delete:
      description: Delete a workspace
      operationId: deleteWorkspace
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/import:
    post:
      description: Import a workspace archive into a new workspace
      operationId: importNewWorkspace
      tags:
        - 'Prisme.ai Workspaces'
      requestBody: &ImportRequestBody
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - archive
              additionalProperties: true
              properties:
                archive:
                  type: string
                  format: binary
                  description: Zip archive binary data

      responses: &ImportResponses
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    properties:
                      processing:
                        type: boolean
                      message:
                        type: string
                  - type: object
                    required:
                      - imported
                    properties:
                      createdWorkspaceIds:
                        type: array
                        items:
                          type: string
                      updatedWorkspaceIds:
                        type: array
                        items:
                          type: string
                      imported:
                        type: array
                        items:
                          type: string
                      errors:
                        type: array
                        items:
                          type: object
                          additionalProperties: true
                      workspace:
                        $ref: '#/components/schemas/DSULReadOnly'
                      publishedApps:
                        type: array
                        items:
                          $ref: '#/components/schemas/App'
                      deleted:
                        type: array
                        items:
                          type: string
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/import:
    post:
      description: Import a workspace archive
      operationId: importExistingWorkspace
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: prune
          in: 'query'
          description: Deletes files that are not present in the archive
          required: false
          schema:
            type: string
      requestBody: *ImportRequestBody
      responses: *ImportResponses

  /v2/workspaces/{workspaceId}/versions:
    get:
      description: List workspace versions
      operationId: listWorkspaceVersions
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceVersion'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    post:
      description: Publish a new workspace version
      operationId: publishWorkspaceVersion
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceVersion'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceVersion'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/versions/{versionId}:
    delete:
      description: Delete a workspace version
      operationId: deleteWorkspaceVersion
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'versionId'
          in: 'path'
          description: 'Version name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/{workspaceId}/versions/{versionId}/pull:
    post:
      description: Pull a workspace version from a remote repository or rollback from current repository
      operationId: PullWorkspaceVersion
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'versionId'
          in: 'path'
          description: 'Version name'
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                repository:
                  type: object
                  properties:
                    id:
                      type: string

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  imported:
                    type: array
                    items:
                      type: string
                  errors:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                  workspace:
                    type: object
                  deleted:
                    type: array
                    items:
                      type: string
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/{workspaceId}/versions/{versionId}/duplicate:
    post:
      description: Duplicate this workspace version to a new workspace
      operationId: duplicateWorkspaceVersion
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'versionId'
          in: 'path'
          description: 'Version name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/{workspaceId}/versions/{versionId}/export:
    post:
      description: Export this workspace to a zip archive
      operationId: exportWorkspaceVersion
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'versionId'
          in: 'path'
          description: 'Version name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/{workspaceId}/status:
    get:
      description: Retrieve various debug information
      operationId: getWorkspaceStatus
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - errors
                  - automations
                  - imports
                  - pages
                properties:
                  version:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - import
                          - export
                      importedAt:
                        type: string
                      exportedAt:
                        type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                        err: {}
                      additionalProperties: true
                  changes:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - automations
                            - imports
                            - pages
                        slug:
                          type: string
                        currentChecksum:
                          type: string
                        expectedChecksum:
                          type: string
                        updatedAt:
                          type: string
                        updatedBy:
                          type: string
                  automations:
                    type: array
                    items:
                      type: object
                      properties:
                        slug:
                          type: string
                  imports:
                    type: array
                    items:
                      type: object
                      properties:
                        slug:
                          type: string
                  pages:
                    type: array
                    items:
                      type: object
                      properties:
                        slug:
                          type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/export:
    post:
      description: Export multiple workspaces to a .zip archive
      operationId: exportMultipleWorkspaces
      tags:
        - 'Prisme.ai Workspaces'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                workspaces:
                  type: object
                  properties:
                    query:
                      type: object
                    pagination:
                      type: object
                      additionalProperties: false
                      properties:
                        limit:
                          type: number
                        page:
                          type: number
                includeApps:
                  type: boolean
      responses:
        '200':
          description: Success Response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  ## Workspace secrets
  /v2/workspaces/{workspaceId}/security/secrets:
    get:
      description: Fetch workspace's secrets
      operationId: getWorkspaceSecrets
      tags:
        - 'Secrets'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSecrets'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    patch:
      description: Patch workspace secrets
      operationId: patchWorkspaceSecrets
      tags:
        - 'Secrets'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody: &PATCH_BODY
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceSecrets'

      responses: &PATCH_RESPONSES
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSecrets'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

    put:
      description: Update workspace secrets
      operationId: updateWorkspaceSecrets
      tags:
        - 'Secrets'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody: *PATCH_BODY
      responses: *PATCH_RESPONSES

  /v2/workspaces/{workspaceId}/security/secrets/{secretName}:
    delete:
      description: Delete a secret
      operationId: deleteWorkspaceSecret
      tags:
        - 'Secrets'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'secretName'
          in: 'path'
          description: 'Automation slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  secretName:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  ## automations
  /v2/workspaces/{workspaceId}/automations:
    post:
      description: Create a new automation
      operationId: createAutomation
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Automation'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/automations/{automationSlug}:
    get:
      description: Fetch an automation
      operationId: getAutomation
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'automationSlug'
          in: 'path'
          description: 'Automation slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    patch:
      description: Update an automation
      operationId: updateAutomation
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'automationSlug'
          in: 'path'
          description: 'Automation slug'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Automation'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

    delete:
      description: Delete an automation
      operationId: deleteAutomation
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'automationSlug'
          in: 'path'
          description: 'Automation slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - slug
                properties:
                  slug:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /v2/workspaces/{workspaceId}/test/{automationSlug}:
    post:
      description: Test Automation
      operationId: testAutomation
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'automationSlug'
          in: 'path'
          description: 'Automation slug'
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/AnyValue'
                  description: Entire body will be passed as a payload to the triggered automation
          '*/*':
            schema:
              $ref: '#/components/schemas/AnyValue'
              description: Entire body will be passed as a payload to the triggered automation

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValue'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
  ## pages
  /v2/workspaces/{workspaceId}/pages:
    post:
      description: Create a new page
      operationId: createPage
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

    get:
      description: List workspace pages
      operationId: listPages
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PageMeta'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  # Pages
  /v2/workspaces/{workspaceId}/pages/{slug}:
    get:
      description: Fetch a page
      operationId: getPage
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'Page slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedPage'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    patch:
      description: Update a page
      operationId: updatePage
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'Page slug'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

    delete:
      description: Delete a Page
      operationId: deletePage
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'Page slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/pages/{workspaceSlug}/{pageSlug}:
    get:
      description: Fetch a page by slugs
      operationId: getPageBySlug
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceSlug'
          in: 'path'
          description: 'Workspace slug'
          required: true
          schema:
            type: string
        - name: 'pageSlug'
          in: 'path'
          description: 'Page slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedPage'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  ## Workspace security
  /v2/workspaces/{workspaceId}/security:
    get:
      description: Get workspace security
      operationId: getSecurity
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSecurity'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
    put:
      description: Update workspace security
      operationId: updateSecurity
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceSecurity'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSecurity'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/security/roles:
    get:
      description: Get workspace roles
      operationId: getRoles
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      type: string
                    description:
                      type: string

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/security/apikeys:
    get:
      description: List api keys
      operationId: listApiKeys
      tags:
        - ApiKeys
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
    post:
      description: Create an api key
      operationId: createApiKey
      tags:
        - ApiKeys
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &API_KEY_SAVE_REQUEST_BODY
              type: object
              required:
                - rules
                - name
              properties:
                name:
                  type: string
                rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/PermissionRule'
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /v2/workspaces/{workspaceId}/security/apikeys/{apiKey}:
    put:
      description: Update an api key
      operationId: updateApiKey
      tags:
        - ApiKeys
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: apiKey
          in: path
          description: The target api key
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: *API_KEY_SAVE_REQUEST_BODY
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

    delete:
      description: Delete an api key
      operationId: deleteApiKey
      tags:
        - ApiKeys
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: apiKey
          in: path
          description: The target api key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string

        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
        '403':
          description: ForbiddenError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  ## apps
  /v2/apps:
    get:
      description: Search for an app inside the app store (or retrieve full app store)
      operationId: searchApps
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'text'
          in: 'query'
          description: 'Search these keywords'
          schema:
            type: string
        - name: 'workspaceId'
          in: 'query'
          description: 'Find apps published from this workspace'
          schema:
            type: string
        - name: 'page'
          in: 'query'
          description: 'Page number'
          schema:
            type: number
        - name: 'limit'
          in: 'query'
          description: 'Page size'
          schema:
            type: number
        - name: 'labels'
          in: 'query'
          description: 'Comma-separated labels list to filter on'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/App'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

    post:
      description: Publish a workspace as a new app version
      operationId: publishApp
      tags:
        - 'Prisme.ai Workspaces'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - workspaceId
              properties:
                workspaceId:
                  type: string
                workspaceVersion:
                  type: string
                  description: 'An optional workspace version. If empty, will publish latest workspace version'
                slug:
                  description: 'App slug : Required on first publish'
                  type: string
                description:
                  $ref: '#/components/schemas/LocalizedText'
                name:
                  type: string
                  description: 'An optional version name'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/apps/{appSlug}:
    get:
      description: Fetch an app DSUL
      operationId: getApp
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'appSlug'
          in: 'path'
          description: 'App unique id'
          required: true
          schema:
            type: string
        - name: 'version'
          in: 'query'
          description: 'App version'
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    delete:
      description: Delete an app
      operationId: deleteApp
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'appSlug'
          in: 'path'
          description: 'App unique id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  ## installed apps
  /v2/workspaces/{workspaceId}/apps:
    post:
      description: Install a new app
      operationId: installAppInstance
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppInstance'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppInstance'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
    get:
      description: Get installed aps
      operationId: listAppInstances
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedAppInstance'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/apps/{slug}/config:
    get:
      description: Get the config of an appInstance
      operationId: getAppInstanceConfig
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'App instance slug'
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
    patch:
      description: Update the config of an appInstance
      operationId: updateAppInstanceConfig
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'App instance slug'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppInstance'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/apps/{slug}:
    get:
      description: Fetch this appInstance
      operationId: getAppInstance
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'App instance slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  <<: *AppInstanceMeta
                  config:
                    $ref: '#/components/schemas/Config'
                  documentation:
                    $ref: '#/components/schemas/Page'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
    patch:
      description: Configure an app
      operationId: configureAppInstance
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'App instance slug'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppInstance'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppInstance'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

    delete:
      description: Uninstall an app
      operationId: uninstallAppInstance
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'slug'
          in: 'path'
          description: 'App instance slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  # Files
  /v2/workspaces/{workspaceId}/files/{id}:
    get:
      description: Get a file metadata
      operationId: getFile
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'id'
          in: 'path'
          description: 'File id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    delete:
      description: Delete a file
      operationId: deleteFile
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'id'
          in: 'path'
          description: 'File id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

    patch:
      description: Update file
      operationId: updateFile
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'id'
          in: 'path'
          description: 'File id'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                expiresAfter:
                  type: string
                  description: File expiration time in seconds. This is currently a best effort expiration as it will be deleted only upon the next restart after expiration
                public:
                  type: string
                  description: 'Set to true to make uploaded file publicly available'
                shareToken:
                  type: string
                  description: 'If enabled, return a share token that will allow anybody access the file'
                metadata:
                  type: object
                  additionalProperties: true

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'

  /v2/workspaces/{workspaceId}/files:
    post:
      description: Upload one or more file(s)
      operationId: uploadFile
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              additionalProperties: true
              properties:
                file:
                  type: string
                  format: binary
                  description: Accepts both binary data or dataURI (i.e data:...,base64:...)
                expiresAfter:
                  type: string
                  description: File expiration time in seconds. This is currently a best effort expiration as it will be deleted only upon the next restart after expiration
                public:
                  type: string
                  description: 'Set to true to make uploaded file publicly available'
                shareToken:
                  type: string
                  description: 'If enabled, return a share token that will allow anybody access the file'

      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'
    get:
      description: List workspace files
      operationId: listFiles
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'page'
          in: 'query'
          description: 'Page number'
          schema:
            type: number
        - name: 'limit'
          in: 'query'
          description: 'Page size'
          required: false
          schema:
            type: number
        - in: query
          name: query
          schema:
            type: object
            additionalProperties: true
          style: form
          explode: false
        - name: 'sort'
          in: 'query'
          description: 'Sort by a specific field'
          required: false
          example: '-createdAt'
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '404':
          description: Object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundError'
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v2/workspaces/{workspaceId}/files/{id}/share:
    post:
      description: 'Generate a temporary file share url'
      operationId: shareFile
      tags:
        - 'Prisme.ai Workspaces'
      parameters:
        - name: 'workspaceId'
          in: 'path'
          description: 'Workspace id'
          required: true
          schema:
            type: string
        - name: 'id'
          in: 'path'
          description: 'File id'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                expiresIn:
                  type: number
                  description: 'Returned share url will expire in N seconds'
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  expiresAt:
                    type: string
                  expiresIn:
                    type: number
        '401':
          description: AuthenticationError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        '403':
          description: Bad permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadParametersError'


  ## End of APIs
